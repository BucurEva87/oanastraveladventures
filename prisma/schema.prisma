// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  ADMIN
  MODERATOR
  USER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  accounts      Account[]
  session       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model City {
  id          String  @id @default(cuid())
  name        String  @db.VarChar(100)
  country     String  @db.VarChar(100)
  countryFlag String  @db.VarChar(10)
  countryCode String  @db.Char(2)
  sector      String  @db.VarChar(100)
  sectorAuto  String  @db.VarChar(100)
  latitude    Float
  longitude   Float
  description String? @db.Text

  location Location[]
  images   Image[]
}

model Location {
  id          String  @id @default(cuid())
  name        String  @db.VarChar(100)
  cityId      String
  type        String? @db.VarChar(100)
  description String? @db.Text
  website     String? @db.VarChar(255)
  entryFee    Float?

  city   City?           @relation(fields: [cityId], references: [id], onDelete: Cascade)
  offers RouteLocation[]
  images Image[]
}

model Route {
  id          String  @id @default(cuid())
  name        String  @db.VarChar(100)
  available   Boolean @default(true)
  description String? @db.Text
  prices      String  @db.VarChar(255)
  circular    Boolean @default(false)
  length      Int

  locations RouteLocation[]
  images    Image[]
}

model Image {
  id         String  @id @default(cuid())
  name       String
  url        String
  cityId     String?
  routeId    String?
  locationId String?

  city     City?     @relation(fields: [cityId], references: [id], onDelete: Cascade)
  location Location? @relation(fields: [locationId], references: [id], onDelete: Cascade)
  route    Route?    @relation(fields: [routeId], references: [id], onDelete: Cascade)
}

model RouteLocation {
  id         Int    @id @default(autoincrement())
  locationId String
  routeId    String
  position   Int

  location Location @relation(fields: [locationId], references: [id])
  route    Route    @relation(fields: [routeId], references: [id])

  @@unique([locationId, routeId])
}
